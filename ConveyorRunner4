from robodk import robolink
import paho.mqtt.client as mqtt
import json
import time

# ---------- Inicializar RoboDK ----------
RDK = robolink.Robolink()
RDK.setSelection([])

# ---------- Configuración MQTT ----------
MQTT_BROKER = "broker.emqx.io"
MQTT_PORT = 1883
MQTT_TOPIC = "richi5/giirob/esp32/recibir"
MQTT_CLIENT_ID = "robodk_produccion"
sensor = "sensor_pedidos_final"
mqtt_client = mqtt.Client(client_id=MQTT_CLIENT_ID)
mqtt_client.connect(MQTT_BROKER, MQTT_PORT, 60)
sensor_final = RDK.Item(sensor, robolink.ITEM_TYPE_OBJECT)

# ---------- Función para enviar mensaje MQTT ----------
def enviar_mensaje(evento, nombre=None):
    mensaje = {"evento": evento}
    if nombre:
        mensaje["pedido"] = nombre
    mqtt_client.publish(MQTT_TOPIC, json.dumps(mensaje))
    print(f"📤 Enviado: {mensaje}")

# ---------- Obtener objetos ----------
ref_bag = next((x for x in RDK.ItemList(robolink.ITEM_TYPE_OBJECT)
                if 'reference' in x.Name().lower() and 'bag' in x.Name().lower()), None)
if not ref_bag:
    RDK.ShowMessage('No reference box found.')
    quit()
ref_bag.setVisible(False)

conveyor = next((x for x in RDK.ItemList(robolink.ITEM_TYPE_ROBOT_AXES)
                 if len(x.Joints().tolist()) == 1 and 'cuarta' in x.Name().lower()), None)
if not conveyor:
    RDK.ShowMessage('No conveyor found.')
    quit()

frames = [x for x in conveyor.Childs() if x.Type() == robolink.ITEM_TYPE_FRAME]
conveyor_frame = frames[0] if frames else RDK.AddFrame("Frame Cuarta", conveyor)

# ---------- Variables de control ----------
pos = 0.0
speed = 100
interval = 0.1
box_queue = []
ref_box = ref_bag

# ---------- Función para generar una bolsa ----------
def spawn_bolsa(nombre, sabor, contador):
    RDK.Render(False)
    selection = RDK.Selection()

    # Normalizar sabor y seleccionar la referencia correspondiente
    sabor_norm = sabor.lower().strip()
    nombre_ref = f"referencebag_{sabor_norm}"
    ref_especifica = next((x for x in RDK.ItemList(robolink.ITEM_TYPE_OBJECT)
                           if x.Name().lower() == nombre_ref), None)

    bolsa_base = ref_especifica if ref_especifica and ref_especifica.Valid() else ref_bag
    if not ref_especifica:
        print(f"⚠️ No se encontró '{nombre_ref}', usando ref_bag genérica")

    bolsa_base.Copy(copy_children=False)
    time.sleep(0.05)
    nueva = bolsa_base.Parent().Paste()
    RDK.setSelection(selection)

    if nueva and nueva.Valid():
        nueva.setParentStatic(conveyor_frame)
        nueva.setName(f"Bag_{nombre}_{sabor}_{contador}")
        nueva.setVisible(True)
        RDK.Render(True)
        return nueva
    return None

# ---------- Función para eliminar bolsas al tocar el sensor ----------
def eliminar_bolsa_cercana():
    objetivos = [o for o in conveyor_frame.Childs()
                 if o.Type() == robolink.ITEM_TYPE_OBJECT and o.Valid(True) and o.Name().lower().startswith('bag')]
    if not objetivos:
        return
    sensor_pose = sensor_final.Pose().Pos()
    objetivo_cercano = min(objetivos, key=lambda c: sum((sensor_pose[i] - c.Pose().Pos()[i]) ** 2 for i in range(3)) ** 0.5)
    RDK.Delete(objetivo_cercano)

# ---------- Función para eliminar variables vacías de pedidos ----------
def limpieza_variables():
    for clave, valor in RDK.getParams():
        if valor in [None, "", "None"] and ("pedido" in clave.lower() or "seguro" in clave.lower()):
            RDK.setParam(clave, "")

# ---------- Loop principal ----------
while True:
    parada_emergencia = float(RDK.getParam("stop") or 0)
    while parada_emergencia == 1:
        RDK.ShowMessage("PARADA EMERGENCIA ACTIVADA", False)
        parada_emergencia = float(RDK.getParam("stop") or 0)
    if int(float(RDK.getParam(sensor) or 0)) == 0:
        time.sleep(interval)
        pos += speed * interval
        conveyor.setJoints([pos])

        parametros = [(k, v) for k, v in RDK.getParams() if v not in [None, '', 'None']]
        claves = [k for k, _ in parametros if k.startswith("rellenados_pedido_")]

        for clave in claves:
            partes = clave.replace("rellenados_pedido_", "").split("_")
            if len(partes) < 2:
                continue
            nombre = "_".join(partes[:-1])
            sabor = partes[-1]

            clave_rellenados = f"rellenados_pedido_{nombre}_{sabor}"
            clave_seguro = f"seguro_pedido_{nombre}_{sabor}"

            try:
                rellenados = int(float(RDK.getParam(clave_rellenados) or 0))
                seguro = int(float(RDK.getParam(clave_seguro) or 0))
            except:
                continue

            if rellenados != seguro or seguro <= 0:
                continue

            if rellenados <= 0:
                enviar_mensaje("fin de produccion", nombre)
                continue

            childs = conveyor_frame.Childs()
            box_queue = [b for b in box_queue if b.Valid(True) and b in childs]

            if not box_queue or (box_queue[-1].Valid(True) and not RDK.Collision(box_queue[-1], ref_box)):
                nueva = spawn_bolsa(nombre, sabor, rellenados)
                if nueva:
                    box_queue.append(nueva)
                    nuevo_valor = rellenados - 1
                    nuevo_seguro = seguro - 1

                    # 🔁 Actualizar siempre los valores
                    RDK.setParam(clave_rellenados, nuevo_valor)
                    RDK.setParam(clave_seguro, nuevo_seguro)

                    if nuevo_valor <= 0:
                        enviar_mensaje("fin de produccion", nombre)
    else:
        eliminar_bolsa_cercana()
        limpieza_variables()
